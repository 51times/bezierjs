/**
  A javascript Bezier curve library by Pomax.

  Based on http://pomax.github.io/bezierinfo

  This code is public domain because it's been over fifty years,
  anyone can implement this library from scratch if they actually
  wanted to.

  If you live in a country that doesn't recognise the public
  domain, this code is MIT licensed. Also your country has a
  terribly legal system where my disclaim is not respected.
**/
(function() {
  "use strict";

  // utility function: map number from one domain to another
  var map = function(v, ds,de, ts,te) {
    var d1 = de-ds, d2 = te-ts, v2 =  v-ds, r = v2/d1;
    return ts + d2*r;
  };

  // utility function: copy objects
  var copy = function(obj) {
    return JSON.parse(JSON.stringify(obj));
  }

  // utility function: compute a line/line intersection coordinate
  var lli = function(v1, v2) {
    var x1=v1.c.x, y1=v1.c.y,
        x2=v1.x, y2=v1.y,
        x3=v2.c.x,y3=v2.c.y,
        x4=v2.x,y4=v2.y,
        nx=(x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4),
        ny=(x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4),
        d=(x1-x2)*(y3-y4)-(y1-y2)*(x3-x4);
    if(d==0) { return false; }
    return { x: nx/d, y: ny/d, z: 0 };
  };

  /**
   * Legendre-Gauss root finding functions
   */
  var RootFinder = (function() {

    // Legendre-Gauss abscissae (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))
    var Tvalues = [
      [],
      [],
      [  -0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476],
      [0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665],
      [  -0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957],
      [0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256],
      [   0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347],
      [0, 0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007],
      [  -0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282],
      [0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857],
      [  -0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282],
      [0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714],
      [  -0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601],
      [0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649],
      [  -0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760],
      [0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469],
      [  -0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262],
      [0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077],
      [  -0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525],
      [0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893],
      [  -0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226],
      [0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933],
      [  -0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930],
      [0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736],
      [  -0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745]
    ];

    // Legendre-Gauss weights (w_i values, defined by a function linked to in the Bezier primer article)
    var Cvalues = [
      [],
      [],
      [1.0,1.0],
      [0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555],
      [0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353],
      [0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432],
      [0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268],
      [0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285],
      [0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153],
      [0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718],
      [0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578],
      [0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285],
      [0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170],
      [0.2325515532308739101945895152688359481566,0.2262831802628972384120901860397766184347,0.2262831802628972384120901860397766184347,0.2078160475368885023125232193060527633865,0.2078160475368885023125232193060527633865,0.1781459807619457382800466919960979955128,0.1781459807619457382800466919960979955128,0.1388735102197872384636017768688714676218,0.1388735102197872384636017768688714676218,0.0921214998377284479144217759537971209236,0.0921214998377284479144217759537971209236,0.0404840047653158795200215922009860600419,0.0404840047653158795200215922009860600419],
      [0.2152638534631577901958764433162600352749,0.2152638534631577901958764433162600352749,0.2051984637212956039659240656612180557103,0.2051984637212956039659240656612180557103,0.1855383974779378137417165901251570362489,0.1855383974779378137417165901251570362489,0.1572031671581935345696019386238421566056,0.1572031671581935345696019386238421566056,0.1215185706879031846894148090724766259566,0.1215185706879031846894148090724766259566,0.0801580871597602098056332770628543095836,0.0801580871597602098056332770628543095836,0.0351194603317518630318328761381917806197,0.0351194603317518630318328761381917806197],
      [0.2025782419255612728806201999675193148386,0.1984314853271115764561183264438393248186,0.1984314853271115764561183264438393248186,0.1861610000155622110268005618664228245062,0.1861610000155622110268005618664228245062,0.1662692058169939335532008604812088111309,0.1662692058169939335532008604812088111309,0.1395706779261543144478047945110283225208,0.1395706779261543144478047945110283225208,0.1071592204671719350118695466858693034155,0.1071592204671719350118695466858693034155,0.0703660474881081247092674164506673384667,0.0703660474881081247092674164506673384667,0.0307532419961172683546283935772044177217,0.0307532419961172683546283935772044177217],
      [0.1894506104550684962853967232082831051469,0.1894506104550684962853967232082831051469,0.1826034150449235888667636679692199393835,0.1826034150449235888667636679692199393835,0.1691565193950025381893120790303599622116,0.1691565193950025381893120790303599622116,0.1495959888165767320815017305474785489704,0.1495959888165767320815017305474785489704,0.1246289712555338720524762821920164201448,0.1246289712555338720524762821920164201448,0.0951585116824927848099251076022462263552,0.0951585116824927848099251076022462263552,0.0622535239386478928628438369943776942749,0.0622535239386478928628438369943776942749,0.0271524594117540948517805724560181035122,0.0271524594117540948517805724560181035122],
      [0.1794464703562065254582656442618856214487,0.1765627053669926463252709901131972391509,0.1765627053669926463252709901131972391509,0.1680041021564500445099706637883231550211,0.1680041021564500445099706637883231550211,0.1540457610768102880814315948019586119404,0.1540457610768102880814315948019586119404,0.1351363684685254732863199817023501973721,0.1351363684685254732863199817023501973721,0.1118838471934039710947883856263559267358,0.1118838471934039710947883856263559267358,0.0850361483171791808835353701910620738504,0.0850361483171791808835353701910620738504,0.0554595293739872011294401653582446605128,0.0554595293739872011294401653582446605128,0.0241483028685479319601100262875653246916,0.0241483028685479319601100262875653246916],




      [0.1392518728556319933754102483418099578739,0.1392518728556319933754102483418099578739,0.1365414983460151713525738312315173965863,0.1365414983460151713525738312315173965863,0.1311735047870623707329649925303074458757,0.1311735047870623707329649925303074458757,0.1232523768105124242855609861548144719594,0.1232523768105124242855609861548144719594,0.1129322960805392183934006074217843191142,0.1129322960805392183934006074217843191142,0.1004141444428809649320788378305362823508,0.1004141444428809649320788378305362823508,0.0859416062170677274144436813727028661891,0.0859416062170677274144436813727028661891,0.0697964684245204880949614189302176573987,0.0697964684245204880949614189302176573987,0.0522933351526832859403120512732112561121,0.0522933351526832859403120512732112561121,0.0337749015848141547933022468659129013491,0.0337749015848141547933022468659129013491,0.0146279952982722006849910980471854451902,0.0146279952982722006849910980471854451902],


    ];

    // root finding precision cap
    var NRRF_PRECISION = 0.000001;

    // LUT for binomial coefficient arrays per curve order 'n'
    var binomial_coefficients = [
      [1],
      [1,1],
      [1,2,1],
      [1,3,3,1],
      [1,4,6,4,1],
      [1,5,10,10,5,1],
      [1,6,15,20,15,6,1]
    ];

    // Look up what the binomial coefficient is for pair {n,k}
    var binomials = function(n, k) {
      return binomial_coefficients[n][k];
    };

    /**
     * Compute the curve derivative (hodograph) at t.
     */
    var getDerivative = function(derivative, t, values) {
      // the derivative of any 't'-less function is zero.
      var n = values.length-1;
      if (n===0) { return 0; }
      // direct values? compute!
      if(derivative===0) {
        var value = 0;
        for(var k=0; k<=n; k++) {
          value += binomials(n,k) * Math.pow(1-t,n-k) * Math.pow(t,k) * values[k];
        }
        return value;
      }
      // Still some derivative? go down one order, then try for the lower order curve's.
      var _v = [];
      for(var k=0; k<values.length-1; k++) {
        _v[k] = n * (values[k+1] - values[k]);
      }
      return getDerivative(derivative-1, t, _v);
    };

    /**
     * Newton-Raphson root finding (with depth capping).
     * Iteratively compute x(n+1) = x(n) - f(x)/f'(x),
     * until (x(n+1) - x(n)) approaches zero with a
     * satisfactory precision.
     */
    var findRootsRecursive = function(derivative, t, values, offset, depth) {
      // root finding should work.
      var f  = getDerivative(derivative, t, values) - offset,
          df = getDerivative(derivative+1, t, values),
          t2 = t - (f/df);

      // division by zero => treat f as unit tangent
      if(df==0) { t2 = t - f; }

      // once we hit the recursion cap, stop
      if(depth > 12) {
        if(Math.abs(t-t2)<NRRF_PRECISION) { return ((t2/NRRF_PRECISION)|0)*NRRF_PRECISION; }
        throw new RuntimeException("Newton-Raphson ran past recursion depth");
      }

      // otherwise, recurse if we've not reached the desired precision yet
      if (Math.abs(t-t2)>NRRF_PRECISION) {
        return findRootsRecursive(derivative, t2, values, offset, depth+1);
      }
      return t2;
    };

    var findRoots = function(derivative, t, values, offset) {
      return findRootsRecursive(derivative, t, values, offset||0, 0);
    };

    /**
     * Root finding using the Newton-Raphson method
     */
    var findAllRoots = function(derivative, values) {
      var none = [];

      // Derivative will be a point function. No roots.
      if(values.length-derivative <=1) {
        return none;
      }

      // Derivative will be a linear function: compute root directly.
      if(values.length-derivative == 2) {
        while(values.length > 2) {
          var _v = [];
          for(var k=0, n=_v.length; k<n; k++) {
            _v[k] = n * (values[k+1] - values[k]);
          }
          values = _v;
        }
        if(values.length<2) {
          return none;
        }
        var root = map(0,values[0],values[1],0,1);
        if(root<0 || root>1) {
          return none;
        }
        return [root];
      }

      // Compute recursively
      var roots = [];
      var root;
      for(var t=0; t<=1.0; t+= 0.01) {
        root = Math.round(findRoots(derivative, t, values)/NRRF_PRECISION) * NRRF_PRECISION;
        if(root<0 || root>1) continue;
        if(Math.abs(root-t)<=NRRF_PRECISION) continue;
        if(roots.indexOf(root) > -1) continue;
        roots.push(root);
      }
      return roots;
    };

    return { find: findAllRoots };
  }());


  /**
   * Bezier curve constructor. The constructor argument can be one of three things:
   *
   * 1. array/4 of {x:..., y:..., z:...}, z optional
   * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4
   * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4
   *
   */
  var Bezier = function(coords) {
    var args = (coords && coords.forEach ? coords : arguments);
    if(typeof args[0] === "object") {
      args = [];
      for(var i=0; i<coords.length; i++) {
        ['x','y','z'].forEach(function(d) {
          if(coords[i][d]) {
            args.push(coords[i][d]);
          }
        });
      }
    }
    var len = args.length;
    if(len!==8 && len!==12) {
      throw new Error("Not a cubic curve");
    }
    var _3d = (len % 3 === 0);
    this._3d = _3d;
    var points = [];
    for(var idx=0, step=(_3d?3:2); idx<len; idx+=step) {
      var point = {
        x: args[idx],
        y: args[idx+1],
        z: 0
      };
      if(_3d) point.z = args[idx+2];
      points.push(point);
    }
    this.order = points.length - 1;
    this.points = points;
    var dims = ['x','y'];
    if(this._3d) dims.push('z');
    this.dims = dims;
    this.dimlen = dims.length;

  };


  /**
   * Bezier curve prototype. API:
   *
   * 1.  getLUT(steps) yields array/steps of {x:..., y:..., z:...} coordinates.
   * 2.  get(t) alias for compute(t).
   * 3.  compute(t) yields the curve coordinate at 't'.
   * 4.  derivative(t) yields the curve derivative at 't' as vector.
   * 5.  normal(t) yields the normal vector for the curve at 't'.
   * 6a. split(t) split the curve at 't' and return both segments as new curves.
   * 6b. split(t1,t2) split the curve between 't1' and 't2' and return the segment as new curve.
   * 7.  roots() yields all known inflection points on this curve.
   * 8.  offset(t, d) yields a coordinate that is a point on the curve at 't',
   *                 offset by distance 'd' along its normal.
   * 9.  reduce() yields an array of 'simple' curve segments that model the curve as poly-simple-beziers.
   * 10. scale(d) yields the curve scaled approximately along its normals by distance 'd'.
   *
   */
  Bezier.prototype = {
    getLUT: function(steps) {
      var points = [];
      for(var t=0, step=1/steps; t<=1+step; t+=step) {
        points.push(this.compute(t));
      }
      return points;
    },
    get: function(t) {
      return this.compute(t);
    },
    point: function(idx) {
      return this.points[idx];
    },
    compute: function(t) {
      if(t===0) { return this.points[0]; }
      if(t===1) { return this.points[3]; }
      var dims=this.dims,len=this.dimlen,i,dim,result={};
      for(i=len-1; i>-1;i--) {
        dim = dims[i];
        result[dim] = this.computeDim(dim,t);
      }
      if(!result.z) result.z=0;
      return result;
    },
    computeDim: function(v,t) {
      var p = this.points;
      p = [p[0][v], p[1][v], p[2][v], p[3][v]];
      var mt = 1-t,
          t2 = t*t,
          mt2 = mt*mt,
          a = mt2*mt,
          b = mt2*t*3,
          c = mt*t2*3,
          d = t*t2;
      return a*p[0] + b*p[1] + c*p[2] + d*p[3];
    },
    derivative: function(t) {
      var dims=this.dims,len=this.dimlen,i,dim,result={};
      for(i=len-1; i>-1;i--) {
        dim = dims[i];
        result[dim] = this.derivativeDim(dim,t);
      }
      return result;
    },
    derivativeDim: function(v,t) {
      var p = this.points;
      p = [3*(p[1][v] - p[0][v]), 3*(p[2][v] - p[1][v]), 3*(p[3][v] - p[2][v])];
      var mt = 1-t,
          a = mt*mt,
          b = mt*t*2,
          c = t*t;
      return a*p[0] + b*p[1] + c*p[2];
    },
    normal: function(t) {
      return this._3d ? this.normal3(t) : this.normal2(t);
    },
    normal2: function(t) {
      var d = this.derivative(t);
      var q = Math.sqrt(d.x*d.x + d.y*d.y)
      return { x: -d.y/q, y: d.x/q, z: 0 };
    },
    normal3: function() {
      // see http://stackoverflow.com/questions/25453159
      var r1 = this.derivative(t),
          r2 = this.derivative(t+0.01),
          q1 = Math.sqrt(r1.x*r1.x + r1.y*r1.y + r1.z*r1.z),
          q2 = Math.sqrt(r2.x*r2.x + r2.y*r2.y + r2.z*r2.z);
      r1.x /= q1; r1.y /= q1; r1.z /= q1;
      r2.x /= q2; r2.y /= q2; r2.z /= q2;
      // cross product
      var c = {
        x: r2.y*r1.z - r2.z*r1.y,
        y: r2.z*r1.x - r2.x*r1.z,
        z: r2.x*r1.y - r2.y*r1.x
      };
      var m = Math.sqrt(c.x*c.x + c.y*c.y + c.z*c.z);
      c.x /= m; c.y /= m; c.z /= m;
      // rotation matrix
      var R = [   c.x*c.x,   c.x*c.y-c.z, c.x*c.z+c.y,
            c.x*c.y+c.z,   c.y*c.y,   c.y*c.z-c.x,
            c.x*c.z-c.y, c.y*c.z+c.x,   c.z*c.z    ];
      // normal vector:
      var n = {
        x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,
        y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,
        z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z
      };
      return n;
    },
    split: function(t1, t2) {
      // shortcuts
      if(t1===0 && !!t2) { return this.split(t2)[0]; }
      if(t2===1) { return this.split(t1)[1]; }
      // split on t1 first, regardless of whether there's a t2
      var dims=this.dims,len=this.dimlen,i,dim,result={};
      for(i=len-1; i>-1;i--) {
        dim = dims[i];
        result[dim] = this.splitDim(dim,t1);
      }
      var args, j, idx, curves = [];
      for(i=0; i<2; i++) {
        args = [];
        for(idx=0; idx<4;idx++) {
          for(j=0; j<len; j++) {
            dim = dims[j]
            args.push(result[dim][i][idx])
          }
        }
        curves.push(new Bezier(args));
      }
      // if we have a t2, split again:
      if(t2) {
        t2 = map(t2,t1,1,0,1);
        curves = curves[1].split(t2);
        return curves[0];
      }
      return curves;
    },
    splitDim: function(v,z) {
      // see http://pomax.github.io/bezierinfo/#matrixsplit
      var p = this.points;
      p = [p[0][v], p[1][v], p[2][v], p[3][v]];
      var zm = z-1,
          z2 = z*z,
          zm2 = zm*zm,
          z3 = z2*z,
          zm3 = zm2*zm;
      var p1 = p[0],
          p2 = z*p[1] - zm*p[0],
          p3 = z2*p[2] - 2*z*zm*p[1] + zm2*p[0],
          p4 = z3*p[3] - 3*z2*zm*p[2] + 3*z*zm2*p[1]-zm3*p[0],
          p5 = p4,
          p6 = z2*p[3] - 2*z*zm*p[2] + zm2*p[1],
          p7 = z*p[3] - zm*p[2],
          p8 = p[3];
      return [[p1,p2,p3,p4],[p5,p6,p7,p8]];
    },
    roots: function() {
      var dims=this.dims,len=this.dimlen,i,dim,p,result={},roots=[];
      for(i=len-1; i>-1;i--) {
        dim = dims[i];
        p = this.points.map(function(v) { return v[dim]; });
        result[dim] = RootFinder.find(1,p).concat(RootFinder.find(2,p));
        roots = roots.concat(result[dim].sort());
      }
      roots.sort();
      result.roots = roots;
      return result;
    },
    bbox: function() {
      var roots = this.roots(), result = {};
      ['x','y','z'].forEach(function(d) {
        result[d] = this.getminmax(d, roots[d]);
      }.bind(this));
      return result;
    },
    getminmax: function(d, list) {
      if(!list) return { min:0, max:0 };
      var min=0xFFFFFFFFFFFFFFFF, max=-min,t,c;
      if(list.indexOf(0)===-1) { list = [0].concat(list); }
      if(list.indexOf(1)===-1) { list.push(1); }
      for(var i=0,len=list.length; i<len; i++) {
        t = list[i];
        c = this.get(t);
        if(c[d] < min) { min = c[d]; }
        if(c[d] > max) { max = c[d]; }
      }
      return { min:min, max:max };
    },
    offset: function(t, d) {
      var c = this.get(t);
      var n = this.normal(t);
      return {
        c: c,
        n: n,
        x: c.x + n.x * d,
        y: c.y + n.y * d,
        z: c.z + n.z * d,
      };
    },
    simple: function() {
      var s = this.points[0];
      var e = this.points[3];
      var tm = this.get(0.5);
      var ds = { x: tm.x-s.x, y: tm.y-s.y, z: tm.z-s.z };
      ds = Math.sqrt(ds.x*ds.x + ds.y*ds.y + ds.z*ds.z);
      var de = { x: tm.x-e.x, y: tm.y-e.y, z: tm.z-e.z };
      de = Math.sqrt(de.x*de.x + de.y*de.y + de.z*de.z);
      var diff = Math.abs(ds-de);
      return diff < 10;
    },
    reduce: function() {
      /**
        "simple" curve definition: a curve with an orientable hull,
        and a point t=0.5 roughly equidistant to the start and end points.
      **/
      var t1=0, t2=0, step=0.01, segment, segments=[];
      while(t2 <= 1) {
        for(t2=t1+step; t2<=1+step; t2+=step) {
          segment = this.split(t1,t2);
          if(!segment.simple()) {
            t2 -= step;
            segments.push(this.split(t1,t2));
            t1 = t2;
            break;
          }
        }
      }
      if(t1<1) { segments.push(this.split(t1,1)); }
      return segments;
/*
      var roots = this.roots().roots;
      if(roots.indexOf(0) === -1) { roots = [0].concat(roots); }
      if(roots.indexOf(1) === -1) { roots.push(1); }
      var i, t1, t2, segment, segments=[];
      for(i=1; i<roots.length; i++) {
        t1 = roots[i-1];
        t2 = roots[i];
        segment = this.split(t1,t2);
        segment._t1 = t1;
        segment._t2 = t2;
        segments.push(segment);
      }
      return segments;
*/
    },
    scale: function(d) {
      var v = [ this.offset(0,10), this.offset(1,10) ];
      var o = lli(v[0],v[1]);
      if(!o) { throw "cannot scale this curve. Try reducing it first."; }
      // move all points by distance 'd' wrt the origin 'o'
      var points=this.points,np=[],p;
      // move end points by fixed distance along normal.
      [0,1].forEach(function(t) {
        var p = np[t*3] = copy(points[t*3]);
        p.x += d * v[t].n.x;
        p.y += d * v[t].n.y;
      }.bind(this));
      // move control points by "however much necessary to ensure
      // the correct tangent to endpoint".
      [0,1].forEach(function(t) {
        var d = this.derivative(t);
        var x = np[t*3].x;
        var y = np[t*3].y;
        var ls = { x: x, y: y, c: { x: x + d.x, y: y + d.y }};
        o.c = points[t+1];
        var o2 = lli(ls, o);
        np[t+1] = o2;
      }.bind(this));
      return new Bezier(np);
    }
  };

  if (typeof module !== "undefined" && module.exports) {
    module.exports = Bezier;
  }

  else if (typeof window !== "undefined") {
    window.Bezier = Bezier;
  }

}());
